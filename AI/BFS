graph={'A':set(['B','C']),
       'B':set(['A','D','E']),
       'C':set(['A','F']),
       'D':set(['B']),
       'E':set(['B','F']),
       'F':set(['C','E'])
       }
def bfs(graph,start):
    visited,queue=set(),[start]
    while queue:
        vertex=queue.pop(0)
        if vertex not in visited:
            #print("Current vertex:",vertex)#extra
            visited.add(vertex)
            #print("Current visited:",visited)#extra
            queue.extend(graph[vertex]-visited)
    return visited

print("Visited Nodes:",bfs(graph,'A'))

def bfs_paths(graph,start,goal):
    queue=[(start,[start])]
    #print()
    while queue:
        #print("current queue",queue)#extra    
        (vertex,path)=queue.pop(0)
        for next in graph[vertex]-set(path):
            #print("next:",next)#extra
            #print("current graph[vertex]",graph[vertex])#extra
            #print("current set(path)",set(path))#extra
            if next==goal:
                yield path+[next]
            else:
                queue.append((next,path+[next]))
                #print("current queue",queue)#extra
        #print()
print("Path: ",list(bfs_paths(graph,'A','E')))

def shortest_path(graph,start,goal):
    try:
        return next(bfs_paths(graph,start,goal))
    except stopIteration:
        return None
print("short path:",shortest_path(graph,'A','E'))



'''output
Visited Nodes: {'E', 'C', 'F', 'D', 'A', 'B'}
Path:  [['A', 'B', 'E'], ['A', 'C', 'F', 'E']]
short path: ['A', 'B', 'E']''''
