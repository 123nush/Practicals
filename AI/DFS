graph={'A':set(['B','C']),
       'B':set(['A','D','E']),
       'C':set(['A','F']),
       'D':set(['B']),
       'E':set(['B','F']),
       'F':set(['C','E'])
       }
def dfs(graph,start):
    visited,stack=set(),[start]
    while stack:#10
        vertex=stack.pop()
        if vertex not in visited:
            #print("Current vertex:",vertex)#extra
            visited.add(vertex)
            #print("Current visited:",visited)#extra
            stack.extend(graph[vertex]-visited)
            #print("Stack:",stack)
    return visited

print(dfs(graph,'A'))#20

def dfs_paths(graph,start,goal):
    stack=[(start,[start])]
    #print()
    while stack:
        #print("current stack",stack)#extra    
        (vertex,path)=stack.pop()
        for next in graph[vertex]-set(path):
            #print("next:",next)
            #print("current graph[vertex]",graph[vertex])#extra
            #print("current set(path)",set(path))#extra
            if next==goal:
                yield path+[next]
            else:
                stack.append((next,path+[next]))
                #print("current stack",stack)#extra
        #print()
print(list(dfs_paths(graph,'A','E')))

def shortest_path(graph,start,goal):
    try:#40
        min_path=float('inf')
        for path in list(dfs_paths(graph,start,goal)):
            size=len(path)
            if size<min_path:
                min_path=size
                short_path=path
        return short_path# shorts
    except StopIteration:
        return None
print(shortest_path(graph,'A','E'))
''''output
{'E', 'A', 'B', 'C', 'D', 'F'}
[['A', 'B', 'E'], ['A', 'C', 'F', 'E']]
['A', 'B', 'E']''''
